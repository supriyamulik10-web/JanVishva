{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Supriya/OneDrive/Desktop/JanVishva/janvishwa/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Supriya/OneDrive/Desktop/JanVishva/janvishwa/app/api/onboarding/individual/route.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma'\r\nimport { NextResponse } from 'next/server'\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const data = await request.json()\r\n\r\n    // Check if user already exists\r\n    let user = await prisma.user.findFirst({\r\n      where: {\r\n        OR: [\r\n          { clerkUserId: data.clerkUserId },\r\n          { email: data.email }\r\n        ]\r\n      },\r\n      include: {\r\n        individualProfile: true\r\n      }\r\n    })\r\n\r\n    if (!user) {\r\n      // Create new user\r\n      user = await prisma.user.create({\r\n        data: {\r\n          clerkUserId: data.clerkUserId,\r\n          email: data.email,\r\n          firstName: data.firstName,\r\n          lastName: data.lastName,\r\n          phone: data.phone || null,\r\n          userType: 'INDIVIDUAL',\r\n          individualProfile: {\r\n            create: {\r\n              address: data.address || null,\r\n              city: data.city || null,\r\n              state: data.state || null,\r\n              pincode: data.pincode || null,\r\n              skills: data.skills || [],\r\n              interests: data.interests || []\r\n            }\r\n          }\r\n        },\r\n        include: {\r\n          individualProfile: true\r\n        }\r\n      })\r\n    } else {\r\n      // Update existing user\r\n      user = await prisma.user.update({\r\n        where: { id: user.id },\r\n        data: {\r\n          firstName: data.firstName,\r\n          lastName: data.lastName,\r\n          phone: data.phone || null,\r\n          userType: 'INDIVIDUAL',\r\n          individualProfile: user.individualProfile\r\n            ? {\r\n                update: {\r\n                  address: data.address || null,\r\n                  city: data.city || null,\r\n                  state: data.state || null,\r\n                  pincode: data.pincode || null,\r\n                  skills: data.skills || [],\r\n                  interests: data.interests || []\r\n                }\r\n              }\r\n            : {\r\n                create: {\r\n                  address: data.address || null,\r\n                  city: data.city || null,\r\n                  state: data.state || null,\r\n                  pincode: data.pincode || null,\r\n                  skills: data.skills || [],\r\n                  interests: data.interests || []\r\n                }\r\n              }\r\n        },\r\n        include: {\r\n          individualProfile: true\r\n        }\r\n      })\r\n    }\r\n\r\n    return NextResponse.json({ success: true, user })\r\n  } catch (error) {\r\n    console.error('Error creating/updating user:', error)\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to create or update user', \r\n        details: error instanceof Error ? error.message : 'Unknown error' \r\n      }, \r\n      { status: 500 }\r\n    )\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,+BAA+B;QAC/B,IAAI,OAAO,MAAM,sIAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACrC,OAAO;gBACL,IAAI;oBACF;wBAAE,aAAa,KAAK,WAAW;oBAAC;oBAChC;wBAAE,OAAO,KAAK,KAAK;oBAAC;iBACrB;YACH;YACA,SAAS;gBACP,mBAAmB;YACrB;QACF;QAEA,IAAI,CAAC,MAAM;YACT,kBAAkB;YAClB,OAAO,MAAM,sIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC9B,MAAM;oBACJ,aAAa,KAAK,WAAW;oBAC7B,OAAO,KAAK,KAAK;oBACjB,WAAW,KAAK,SAAS;oBACzB,UAAU,KAAK,QAAQ;oBACvB,OAAO,KAAK,KAAK,IAAI;oBACrB,UAAU;oBACV,mBAAmB;wBACjB,QAAQ;4BACN,SAAS,KAAK,OAAO,IAAI;4BACzB,MAAM,KAAK,IAAI,IAAI;4BACnB,OAAO,KAAK,KAAK,IAAI;4BACrB,SAAS,KAAK,OAAO,IAAI;4BACzB,QAAQ,KAAK,MAAM,IAAI,EAAE;4BACzB,WAAW,KAAK,SAAS,IAAI,EAAE;wBACjC;oBACF;gBACF;gBACA,SAAS;oBACP,mBAAmB;gBACrB;YACF;QACF,OAAO;YACL,uBAAuB;YACvB,OAAO,MAAM,sIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC9B,OAAO;oBAAE,IAAI,KAAK,EAAE;gBAAC;gBACrB,MAAM;oBACJ,WAAW,KAAK,SAAS;oBACzB,UAAU,KAAK,QAAQ;oBACvB,OAAO,KAAK,KAAK,IAAI;oBACrB,UAAU;oBACV,mBAAmB,KAAK,iBAAiB,GACrC;wBACE,QAAQ;4BACN,SAAS,KAAK,OAAO,IAAI;4BACzB,MAAM,KAAK,IAAI,IAAI;4BACnB,OAAO,KAAK,KAAK,IAAI;4BACrB,SAAS,KAAK,OAAO,IAAI;4BACzB,QAAQ,KAAK,MAAM,IAAI,EAAE;4BACzB,WAAW,KAAK,SAAS,IAAI,EAAE;wBACjC;oBACF,IACA;wBACE,QAAQ;4BACN,SAAS,KAAK,OAAO,IAAI;4BACzB,MAAM,KAAK,IAAI,IAAI;4BACnB,OAAO,KAAK,KAAK,IAAI;4BACrB,SAAS,KAAK,OAAO,IAAI;4BACzB,QAAQ,KAAK,MAAM,IAAI,EAAE;4BACzB,WAAW,KAAK,SAAS,IAAI,EAAE;wBACjC;oBACF;gBACN;gBACA,SAAS;oBACP,mBAAmB;gBACrB;YACF;QACF;QAEA,OAAO,6JAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAK;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,6JAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}